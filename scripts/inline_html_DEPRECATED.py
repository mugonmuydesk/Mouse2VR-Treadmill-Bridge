#!/usr/bin/env python3
"""
Inline HTML/JS/CSS files back into C++ header for compilation.
This script reads the development HTML file and converts it to C++ raw string literals.
"""

import os
import sys
from pathlib import Path
import textwrap

# MSVC has a string literal size limit of 16380 BYTES (C2026 error)
# We use 15000 bytes to leave some margin for safety
# This properly counts UTF-8 bytes, not characters
MAX_STRING_SIZE = 15000  # in bytes

def read_html_file(html_path):
    """Read the HTML file and return its content."""
    with open(html_path, 'r', encoding='utf-8') as f:
        return f.read()

def split_into_chunks(content, max_size=MAX_STRING_SIZE):
    """Split content into chunks that respect MSVC string size limits."""
    chunks = []
    
    # Try to split at logical boundaries (end of tags)
    lines = content.split('\n')
    current_chunk = []
    current_size = 0
    
    for line in lines:
        line_with_newline = line + '\n'
        # Count actual BYTES, not characters!
        line_size = len(line_with_newline.encode('utf-8'))
        
        if current_size + line_size > max_size and current_chunk:
            # Save current chunk
            chunks.append('\n'.join(current_chunk))
            current_chunk = [line]
            current_size = line_size
        else:
            current_chunk.append(line)
            current_size += line_size
    
    # Add the last chunk
    if current_chunk:
        chunks.append('\n'.join(current_chunk))
    
    return chunks

def generate_cpp_header(html_content, output_path):
    """Generate a C++ header file with the HTML content as string literals."""
    
    # Split HTML into chunks if necessary
    chunks = split_into_chunks(html_content)
    
    header_content = '''// Auto-generated file - DO NOT EDIT
// Generated by inline_html.py from src/webview/ui/index.html
// To modify the UI, edit the HTML files in src/webview/ui/ and run scripts/inline_html.py

#pragma once
#include <string>

namespace Mouse2VR {
namespace WebView {

inline std::wstring GetEmbeddedHTML() {
    std::wstring html;
    
'''
    
    # Add each chunk as a raw string literal
    for i, chunk in enumerate(chunks):
        # Escape any existing )HTML" sequences in the content (unlikely but safe)
        safe_chunk = chunk.replace(')HTML"', ') HTML"')
        
        header_content += f'    // Part {i + 1} of {len(chunks)}\n'
        header_content += f'    html += LR"HTML({safe_chunk})HTML";\n\n'
    
    header_content += '''    return html;
}

} // namespace WebView
} // namespace Mouse2VR
'''
    
    # Write the header file
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(header_content)
    
    print(f"Generated C++ header: {output_path}")
    print(f"  - HTML size: {len(html_content)} characters")
    print(f"  - Split into {len(chunks)} chunk(s)")

def merge_css_js_into_html(ui_dir):
    """Merge external CSS and JS files back into the HTML for inlining."""
    
    index_html = ui_dir / 'index.html'
    styles_css = ui_dir / 'styles.css'
    app_js = ui_dir / 'app.js'
    
    # Check if we should use the development version
    index_dev = ui_dir / 'index_dev.html'
    if index_dev.exists():
        print("Note: Using index_dev.html as source")
        # If dev version exists and has been modified, rebuild from it
        html_content = read_html_file(index_dev)
        
        # Replace external references with inline content
        if styles_css.exists():
            css_content = read_html_file(styles_css)
            html_content = html_content.replace(
                '<link rel="stylesheet" href="styles.css">',
                f'<style>\n{css_content}\n    </style>'
            )
        
        if app_js.exists():
            js_content = read_html_file(app_js)
            html_content = html_content.replace(
                '<script src="app.js"></script>',
                f'<script>\n{js_content}\n    </script>'
            )
        
        return html_content
    else:
        # Use the complete index.html as-is
        return read_html_file(index_html)

def main():
    # Determine paths
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    
    ui_dir = project_root / 'src' / 'webview' / 'ui'
    output_header = project_root / 'src' / 'webview' / 'WebViewWindow_HTML.h'
    
    if not ui_dir.exists():
        print(f"Error: UI directory not found: {ui_dir}")
        print("Run extract_html.py first to extract the HTML from the C++ file.")
        sys.exit(1)
    
    print(f"Reading HTML from: {ui_dir}")
    
    # Merge CSS and JS if we're using separate files
    html_content = merge_css_js_into_html(ui_dir)
    
    # Generate the C++ header
    generate_cpp_header(html_content, output_header)
    
    print("\nInlining complete!")
    print("\nTo use the new header in your code:")
    print('  1. Add: #include "WebViewWindow_HTML.h" to WebViewWindow.cpp')
    print('  2. Replace GetEmbeddedHTML() implementation with:')
    print('     return Mouse2VR::WebView::GetEmbeddedHTML();')
    print("\nThe HTML is now ready to be compiled into the binary.")

if __name__ == "__main__":
    main()