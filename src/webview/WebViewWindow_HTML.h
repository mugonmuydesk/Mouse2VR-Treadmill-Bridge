// Auto-generated file - DO NOT EDIT
// Generated by inline_html.py from src/webview/ui/index.html
// To modify the UI, edit the HTML files in src/webview/ui/ and run scripts/inline_html.py

#pragma once
#include <string>

namespace Mouse2VR {
namespace WebView {

inline std::wstring GetEmbeddedHTML() {
    std::wstring html;
    
    // Part 1 of 2
    html += LR"HTML(
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mouse2VR Treadmill Bridge</title>
    <style>
/* Extracted CSS from Mouse2VR WebView */

body {
            font-family: "Segoe UI Variable", "Segoe UI", sans-serif;
            margin: 0;
            background: #f5f5f5;
            color: #1a1a1a;
            font-size: 14px;
            line-height: 20px;
        }
        
        .page-container {
            padding: 32px 24px;
            max-width: 1280px;
            margin: 0 auto;
        }
        
        /* app-container removed - redundant with app-window */
        
        h1 {
            font-size: 32px;
            line-height: 40px;
            margin: 0 0 32px 0;
            font-weight: 600;
            color: #1a1a1a;
        }
        
        .section-label {
            font-size: 24px;
            line-height: 32px;
            font-weight: 600;
            color: #1a1a1a;
            margin: 32px 0 16px 0;
        }
        
        .status-card, .chart-card, .setting-card {
            background: #ffffff;
            border-radius: 4px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.04), 0 0 2px rgba(0,0,0,0.06);
            padding: 16px;
            margin-bottom: 8px;
        }
        
        .status-grid {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
        
        .status-metric {
            display: flex;
            flex-direction: column;
        }
        
        .status-label {
            font-size: 12px;
            line-height: 16px;
            color: #616161;
            margin-bottom: 2px;
        }
        
        .status-value {
            font-size: 20px;
            line-height: 24px;
            font-weight: 400;
            color: #1a1a1a;
        }
        
        .side-by-side {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 16px;
            margin-bottom: 24px;
            align-items: stretch;
        }
        
        .chart-card {
            display: flex;
            flex-direction: column;
        }
        
        .chart-description {
            font-size: 13px;
            line-height: 18px;
            color: #616161;
            margin-bottom: 12px;
        }
        
        .chart-placeholder {
            flex-grow: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 13px;
            color: #616161;
            border: 1px dashed #ccc;
            border-radius: 6px;
            min-height: 120px;
        }
        
        canvas {
            width: 100% !important;
            height: 100% !important;
        }
        
        .setting-row {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 8px 0;
        }
        
        .setting-label {
            font-size: 14px;
            line-height: 20px;
            font-weight: 500;
        }
        
        .slider-value {
            display: inline-block;
            min-width: 35px;
            text-align: right;
            margin-left: 8px;
            font-weight: 600;
        }
        
        input[type="range"] {
            width: 160px;
        }
        
        /* Show tick marks for datalist */
        input[type="range"]::-webkit-slider-container {
            background: linear-gradient(to right, 
                transparent calc(33.33% - 1px), 
                #ccc calc(33.33% - 1px), 
                #ccc calc(33.33% + 1px), 
                transparent calc(33.33% + 1px));
        }
        
        .radio-group, .checkbox-group {
            display: flex;
            gap: 12px;
            font-size: 14px;
            color: #1a1a1a;
            align-items: center;
        }
        
        .radio-group label, .checkbox-group label {
            display: flex;
            align-items: center;
            gap: 4px;
        }
        
        input[type="checkbox"], input[type="radio"] {
            accent-color: #0078d4;
            width: 16px;
            height: 16px;
            cursor: pointer;
        }
        
        input[type="radio"] {
            border-radius: 50%;
        }
        
        /* Toggle switch styles */
        .switch {
            position: relative;
            display: inline-block;
            width: 44px;
            height: 24px;
        }
        
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 24px;
        }
        
        .slider:before {
            position: absolute;
            content: "";
            height: 18px;
            width: 18px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        
        input:checked + .slider {
            background-color: #0078d4;
        }
        
        input:checked + .slider:before {
            transform: translateX(20px);
        }


    </style>
</head><body>
    <div class="page-container">
        <h1>Mouse2VR Treadmill Bridge</h1>
        
        <div class="side-by-side">
            <div>
                <div class="section-label">Performance Metrics</div>
                <div class="status-card">
                    <div class="status-grid">
                        <div class="status-metric">
                            <span class="status-label">Status</span>
                            <span class="status-value" id="statusValue">Stopped</span>
                        </div>
                        <div class="status-metric">
                            <span class="status-label">Treadmill Speed</span>
                            <span class="status-value" id="treadmillSpeedValue">0.00 m/s</span>
                        </div>
                        <div class="status-metric">
                            <span class="status-label">Stick Deflection</span>
                            <span class="status-value" id="stickValue">0%</span>
                        </div>
                        <div class="status-metric">
                            <span class="status-label">Predicted Game Speed</span>
                            <span class="status-value" id="gameSpeedValue">0.00 m/s</span>
                        </div>
                        <div class="status-metric">
                            <span class="status-label">Target Rate</span>
                            <span class="status-value" id="targetRateValue">50 Hz</span>
                        </div>
                        <div class="status-metric">
                            <span class="status-label">Achieved Rate</span>
                            <span class="status-value" id="achievedRateValue">0 Hz</span>
                        </div>
                        <div class="status-metric">
                            <span class="status-label">UI Refresh Rate</span>
                            <span class="status-value" id="uiRefreshRateValue">5 Hz</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <div class="section-label">Controller Stick Position</div>
                <div class="chart-card">
                    <div class="chart-description">Visualises treadmill movement as left stick deflection.</div>
                    <div class="chart-placeholder">
                        <canvas id="stickCanvas"></canvas>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="section-label">Walking Speed Over Time</div>
        <div class="chart-card">
            <div class="chart-placeholder">
                <canvas id="speedCanvas"></canvas>
            </div>
        </div>
        
        <div class="section-label">Settings</div>
        
        <div class="setting-card">
            <div class="setting-row">
                <span class="setting-label">Mouse DPI</span>
                <div class="radio-group">
                    <label><input type="radio" name="dpi" value="400" onchange="updateDPI(400)"> 400</label>
                    <label><input type="radio" name="dpi" value="800" onchange="updateDPI(800)"> 800</label>
                    <label><input type="radio" name="dpi" value="1000" checked onchange="updateDPI(1000)"> 1000</label>
                    <label><input type="radio" name="dpi" value="1200" onchange="updateDPI(1200)"> 1200</label>
                    <label><input type="radio" name="dpi" value="1600" onchange="updateDPI(1600)"> 1600</label>
                    <label><input type="radio" name="dpi" value="3200" onchange="updateDPI(3200)"> 3200</label>
                    <label>
                        <input type="radio" name="dpi" value="custom" onchange="enableCustomDPI()"> Custom:
                        <input type="number" id="customDPI" min="100" max="25600" value="800" 
                               style="width: 70px; margin-left: 4px;" 
                               disabled onchange="updateCustomDPI(this.value)" />
                    </label>
                </div>
            </div>
        </div>
        
        <div class="setting-card">
            <div class="setting-row">
                <span class="setting-label">Sensitivity</span>
                <div style="display: flex; align-items: center;">
                    <input type="range" id="sensitivity" min="0.1" max="3.0" step="0.1" value="1.0" 
                           oninput="updateSensitivityValue(this.value)" 
                           onchange="updateSensitivity(this.value)" 
                           list="sensitivity-ticks" />
                    <datalist id="sensitivity-ticks">
                        <option value="1.0"></option>
                    </datalist>
                    <span class="slider-value" id="sensitivityValue">1.0</span>
                </div>
            </div>
        </div>
        
        <div class="setting-card">
            <div class="setting-row">
                <span class="setting-label">Backend Target Rate</span>
                <div class="radio-group">
                    <label><input type="radio" name="rate" value="25" onchange="updateRate(25)"> 25 Hz</label>
                    <label><input type="radio" name="rate" value="45" onchange="updateRate(45)"> 45 Hz</label>
                    <label><input type="radio" name="rate" value="50" checked onchange="updateRate(50)"> 50 Hz</label>
                    <label><input type="radio" name="rate" value="60" onchange="updateRate(60)"> 60 Hz</label>
                </div>
            </div>
        </div>
        
        <div class="setting-card">
            <div class="setting-row">
                <span class="setting-label">UI Refresh Rate</span>
                <div class="radio-group">
                    <label><input type="radio" name="uirate" value="1" onchange="updateUIRefreshRate(1)"> 1 Hz</label>
                    <label><input type="radio" name="uirate" value="5" checked onchange="updateUIRefreshRate(5)"> 5 Hz</label>
                    <label><input type="radio" name="uirate" value="20" onchange="updateUIRefreshRate(20)"> 20 Hz</label>
                </div>
            </div>
        </div>
        
        <div class="setting-card">
            <div class="setting-row">
                <span class="setting-label">Axis Options</span>
                <div class="checkbox-group">
                    <label><input type="checkbox" id="invertY" onchange="updateAxisOptions()"> Invert Y Axis</label>
                    <label><input type="checkbox" id="lockX" checked onchange="updateAxisOptions()"> Lock X Axis</label>
                </div>
            </div>
        </div>
        
        <div class="setting-card">
            <div class="setting-row">
                <span class="setting-label">Enable Virtual Controller</span>
                <label class="switch">
                    <input type="checkbox" id="enableController" checked onchange="toggleRunning()">
                    <span class="slider"></span>
                </label>
            </div>
        </div>
    
        <div class="section-label">Diagnostics</div>
        
        <div class="setting-card">
            <div class="setting-row">
                <span class="setting-label">Movement Test</span>
                <div style="display: flex; align-items: center; gap: 12px;">
                    <button id="testButton" onclick="startMovementTest()" 
                            style="padding: 8px 16px; background: #0078d4; color: white; border: none; 
                                   border-radius: 4px; cursor: pointer; font-size: 14px; font-weight: 500;">
                        Run 5-Second Test
                    </button>
                    <span id="testStatus" style="font-size: 14px; color: #616161;"></span>
                </div>
            </div>
            <div id="testInfo" style="margin-top: 8px; font-size: 12px; color: #616161; display: none;">
                Move the treadmill during the test. Results will be logged to logs/debug.log
            </div>
        </div>
    </div>
    
    
    
    
    <script>
// Extracted JavaScript from Mouse2VR WebView

let isRunning = false;
        let treadmillSpeedHistory = [];
        let gameSpeedHistory = [];
        let lastUpdateTime = Date.now();
        let currentDPI = 1000;  // Default DPI
        let sensitivity = 1.0;  // Current sensitivity multiplier
        let currentUIRefreshRate = 5;  // Current UI refresh rate
        
        // Apply config from backend to UI
        function applyConfigToUI(cfg) {
            // DPI - check if it's a preset or custom value
            const dpiRadio = document.querySelector(`input[name="dpi"][value="${cfg.dpi}"]`);
            if (dpiRadio) {
                dpiRadio.checked = true;
            } else {
                // Custom DPI value
                document.querySelector('input[name="dpi"][value="custom"]').checked = true;
                const customInput = document.getElementById('customDPI');
                customInput.disabled = false;
                customInput.value = cfg.dpi;
            }
            currentDPI = cfg.dpi;
            
            // Sensitivity
            const sensSlider = document.getElementById('sensitivity');
            if (sensSlider) {
                sensSlider.value = cfg.sensitivity;
                updateSensitivityValue(cfg.sensitivity);)HTML";

    // Part 2 of 2
    html += LR"HTML(                sensitivity = cfg.sensitivity;
            }
            
            // Backend rate
            const rateRadio = document.querySelector(`input[name="rate"][value="${cfg.updateRateHz}"]`);
            if (rateRadio) {
                rateRadio.checked = true;
                document.getElementById('targetRateValue').textContent = cfg.updateRateHz + ' Hz';
            }
            
            // UI refresh rate
            if (cfg.uiRateHz) {
                const uiRateRadio = document.querySelector(`input[name="uirate"][value="${cfg.uiRateHz}"]`);
                if (uiRateRadio) {
                    uiRateRadio.checked = true;
                    document.getElementById('uiRefreshRateValue').textContent = cfg.uiRateHz + ' Hz';
                    currentUIRefreshRate = cfg.uiRateHz;
                }
            }
            
            // Axis options
            const invertY = document.getElementById('invertY');
            if (invertY) invertY.checked = cfg.invertY;
            
            const lockX = document.getElementById('lockX');
            if (lockX) lockX.checked = cfg.lockX;
            
            // Controller toggle
            const enableController = document.getElementById('enableController');
            if (enableController && cfg.runEnabled !== undefined) {
                enableController.checked = cfg.runEnabled;
                isRunning = cfg.runEnabled;
                document.getElementById('statusValue').textContent = cfg.runEnabled ? 'Running' : 'Stopped';
                document.getElementById('statusValue').style.color = cfg.runEnabled ? '#0f7938' : '#c42b1c';
            }
        }
        
        // Make it available globally for WebView to call
        window.applyConfigToUI = applyConfigToUI;
        
        // Initialize canvases when page loads
        window.addEventListener('DOMContentLoaded', () => {
            initializeStickCanvas();
            initializeSpeedCanvas();
            
            // Request config from backend to sync UI
            if (window.mouse2vr && window.mouse2vr.getConfig) {
                window.mouse2vr.getConfig();
            }
        });
        
        function toggleRunning() {
            const checkbox = document.getElementById('enableController');
            isRunning = checkbox.checked;
            
            if (isRunning) {
                window.mouse2vr.start();
                document.getElementById('statusValue').textContent = 'Running';
                document.getElementById('statusValue').style.color = '#0f7938';
            } else {
                window.mouse2vr.stop();
                document.getElementById('statusValue').textContent = 'Stopped';
                document.getElementById('statusValue').style.color = '#c42b1c';
            }
        }
        
        function updateSensitivityValue(value) {
            document.getElementById('sensitivityValue').textContent = parseFloat(value).toFixed(1);
        }
        
        function updateSensitivity(value) {
            updateSensitivityValue(value);
            sensitivity = parseFloat(value);
            if (window.mouse2vr) {
                window.mouse2vr.setSensitivity(parseFloat(value));
            }
        }

function updateDPI(value) {
            currentDPI = value;
            if (window.mouse2vr) {
                window.mouse2vr.setDPI(value);
            }
            // Disable custom input when preset is selected
            document.getElementById('customDPI').disabled = true;
        }
        
        function enableCustomDPI() {
            const customInput = document.getElementById('customDPI');
            customInput.disabled = false;
            customInput.focus();
            updateCustomDPI(customInput.value);
        }
        
        function updateCustomDPI(value) {
            currentDPI = parseInt(value);
            if (window.mouse2vr && !isNaN(currentDPI)) {
                window.mouse2vr.setDPI(currentDPI);
            }
        }
        
        function startMovementTest() {
            const button = document.getElementById('testButton');
            const status = document.getElementById('testStatus');
            const info = document.getElementById('testInfo');
            
            // Disable button and show status
            button.disabled = true;
            button.style.background = '#808080';
            button.style.cursor = 'not-allowed';
            status.textContent = 'Testing...';
            status.style.color = '#0078d4';
            info.style.display = 'block';
            
            // Send test command
            if (window.mouse2vr) {
                window.mouse2vr.startTest();
            }
            
            // Show countdown
            let secondsLeft = 5;
            const countdownInterval = setInterval(() => {
                secondsLeft--;
                if (secondsLeft > 0) {
                    status.textContent = `Testing... ${secondsLeft}s`;
                } else {
                    clearInterval(countdownInterval);
                    status.textContent = 'Test Complete - Check logs/debug.log';
                    status.style.color = '#10893e';
                    button.disabled = false;
                    button.style.background = '#0078d4';
                    button.style.cursor = 'pointer';
                    
                    // Hide info after a delay
                    setTimeout(() => {
                        info.style.display = 'none';
                        status.textContent = '';
                    }, 5000);
                }
            }, 1000);
        }
        
        function updateRate(value) {
            // Direct pass-through - no hidden mapping
            document.getElementById('targetRateValue').textContent = value + ' Hz';
            
            if (window.mouse2vr) {
                window.mouse2vr.setUpdateRate(value); // Pass directly
            }
        }
        
        function updateUIRefreshRate(value) {
            document.getElementById('uiRefreshRateValue').textContent = value + ' Hz';
            startPolling(value); // Update graph/metrics refresh rate
        }
        
        function updateAxisOptions() {
            const invertY = document.getElementById('invertY').checked;
            const lockX = document.getElementById('lockX').checked;
            
            // Send settings to backend
            if (window.mouse2vr) {
                window.mouse2vr.setInvertY(invertY);
                window.mouse2vr.setLockX(lockX);
            }
        }
        
        // Update speed and stick displays
        function updateSpeed(treadmillSpeed, gameSpeed, stickY, actualHz) {
            // Update treadmill speed value (show absolute for display)
            document.getElementById('treadmillSpeedValue').textContent = Math.abs(treadmillSpeed).toFixed(2) + ' m/s';
            
            // Update predicted game speed
            document.getElementById('gameSpeedValue').textContent = Math.abs(gameSpeed).toFixed(2) + ' m/s';
            
            // Use actual stick Y value if provided
            let stickPercent = 0;
            if (stickY !== undefined) {
                stickPercent = Math.abs(stickY) * 100;
            }
            document.getElementById('stickValue').textContent = Math.round(stickPercent) + '%';
            
            // Update achieved rate from backend
            if (actualHz !== undefined && actualHz > 0) {
                document.getElementById('achievedRateValue').textContent = actualHz + ' Hz';
            }
            
            // Update visualizations with actual stick position
            if (stickY !== undefined) {
                updateStickVisualization(stickY);
            }
            
            // Add both speeds to history (with sign for direction)
            addSpeedToHistory(treadmillSpeed, gameSpeed);
        }
        
        function initializeStickCanvas() {
            const canvas = document.getElementById('stickCanvas');
            if (!canvas) return;
            
            const ctx = canvas.getContext('2d');
            canvas.width = canvas.offsetWidth;
            canvas.height = canvas.offsetHeight;
            
            drawStickBase(ctx, canvas.width, canvas.height);
        }
        
        function drawStickBase(ctx, w, h) {
            // Draw circle for stick area
            ctx.strokeStyle = '#616161';
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.arc(w/2, h/2, Math.min(w, h) * 0.4, 0, Math.PI * 2);
            ctx.stroke();
            
            // Draw center dot
            ctx.fillStyle = '#0078d4';
            ctx.beginPath();
            ctx.arc(w/2, h/2, 5, 0, Math.PI * 2);
            ctx.fill();
        }
        
        function updateStickVisualization(value) {
            const canvas = document.getElementById('stickCanvas');
            if (!canvas) return;
            
            const ctx = canvas.getContext('2d');
            const w = canvas.width;
            const h = canvas.height;
            
            // Clear and redraw base
            ctx.clearRect(0, 0, w, h);
            drawStickBase(ctx, w, h);
            
            // Draw stick position (value ranges from -1 to 1)
            const radius = Math.min(w, h) * 0.4;
            const y = h/2 - (value * radius); // Negative = down, positive = up
            
            ctx.fillStyle = '#0078d4';
            ctx.beginPath();
            ctx.arc(w/2, y, 10, 0, Math.PI * 2);
            ctx.fill();
        }
        
        function initializeSpeedCanvas() {
            const canvas = document.getElementById('speedCanvas');
            if (!canvas) return;
            
            canvas.width = canvas.offsetWidth;
            canvas.height = canvas.offsetHeight;
            
            // Initialize with empty history
            for (let i = 0; i < 50; i++) {
                treadmillSpeedHistory.push(0);
                gameSpeedHistory.push(0);
            }
        }
        
        function addSpeedToHistory(treadmillSpeed, gameSpeed) {
            treadmillSpeedHistory.push(treadmillSpeed);
            gameSpeedHistory.push(gameSpeed);
            
            if (treadmillSpeedHistory.length > 50) {
                treadmillSpeedHistory.shift();
            }
            if (gameSpeedHistory.length > 50) {
                gameSpeedHistory.shift();
            }
            
            drawSpeedGraph();
        }
        
        function drawSpeedGraph() {
            const canvas = document.getElementById('speedCanvas');
            if (!canvas) return;
            
            const ctx = canvas.getContext('2d');
            const w = canvas.width;
            const h = canvas.height;
            
            ctx.clearRect(0, 0, w, h);
            
            // Draw center line (zero speed)
            ctx.strokeStyle = '#d2d2d2';
            ctx.lineWidth = 1;
            ctx.setLineDash([2, 2]);
            ctx.beginPath();
            ctx.moveTo(0, h/2);
            ctx.lineTo(w, h/2);
            ctx.stroke();
            ctx.setLineDash([]);
            
            // Draw treadmill speed (physical)
            ctx.strokeStyle = '#0078d4'; // Microsoft Blue
            ctx.lineWidth = 2;
            ctx.beginPath();
            
            treadmillSpeedHistory.forEach((speed, i) => {
                const x = (i / (treadmillSpeedHistory.length - 1)) * w;
                const y = h/2 - ((speed / 2) * (h/2)); // Scale: 2 m/s = full height for treadmill
                
                if (i === 0) {
                    ctx.moveTo(x, y);
                } else {
                    ctx.lineTo(x, y);
                }
            });
            ctx.stroke();
            
            // Draw game speed (after sensitivity)
            ctx.strokeStyle = '#10893e'; // Microsoft Green
            ctx.lineWidth = 2;
            ctx.globalAlpha = 0.8; // Slight transparency
            ctx.beginPath();
            
            gameSpeedHistory.forEach((speed, i) => {
                const x = (i / (gameSpeedHistory.length - 1)) * w;
                const y = h/2 - ((speed / 6.1) * (h/2)); // Scale: 6.1 m/s = full height (HL2 max)
                
                if (i === 0) {
                    ctx.moveTo(x, y);
                } else {
                    ctx.lineTo(x, y);
                }
            });
            ctx.stroke();
            ctx.globalAlpha = 1.0;
            
            // Draw legend (Fluent Design style)
            const legendX = w - 150;
            const legendY = 10;
            
            // Semi-transparent background
            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
            ctx.fillRect(legendX - 5, legendY - 5, 145, 45);
            
            // Legend items
            ctx.font = '12px "Segoe UI", sans-serif';
            
            // Treadmill speed
            ctx.strokeStyle = '#0078d4';
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.moveTo(legendX, legendY + 8);
            ctx.lineTo(legendX + 20, legendY + 8);
            ctx.stroke();
            
            ctx.fillStyle = '#1a1a1a';
            ctx.fillText('Treadmill Speed', legendX + 25, legendY + 12);
            
            // Game speed
            ctx.strokeStyle = '#10893e';
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.moveTo(legendX, legendY + 25);
            ctx.lineTo(legendX + 20, legendY + 25);
            ctx.stroke();
            
            ctx.fillStyle = '#1a1a1a';
            ctx.fillText('Game Speed (HL2)', legendX + 25, legendY + 29);
        }
        
        // Request speed updates periodically
        let updateInterval = null;
        
        function startPolling(rateHz = 60) {
            // Clear existing interval
            if (updateInterval) {
                clearInterval(updateInterval);
            }
            
            // Calculate interval from Hz (with minimum of 10ms)
            const intervalMs = Math.max(10, Math.floor(1000 / rateHz));
            
            updateInterval = setInterval(() => {
                if (window.mouse2vr && window.mouse2vr.getSpeed) {
                    window.mouse2vr.getSpeed();
                }
            }, intervalMs);
        }
        
        // Start with default polling rate (will be updated by config)
        startPolling(currentUIRefreshRate);
        
        // Initialize
        window.addEventListener('DOMContentLoaded', () => {
            console.log('Mouse2VR UI loaded');
            if (window.mouse2vr) {
                window.mouse2vr.getStatus();
            }
        });


    </script>
</body>
</html>)HTML";

    return html;
}

} // namespace WebView
} // namespace Mouse2VR
